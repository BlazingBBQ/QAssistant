{
  "name": "qassistant",
  "displayName": "QAssistant",
  "description": "",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.34.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "workspaceContains:**/qassistant.config.json"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "qassistant.scaffoldTests",
        "title": "Scaffold Tests"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "QAssistant configuration",
      "properties": {
        "qassistant.fileToTestPattern": {
          "type": "string",
          "default": "all/**",
          "description": "Pattern for files that should have tests scaffolded. (Watch out for infinite loops when using '**')"
        },
        "qassistant.testFileExtensionReplacement": {
          "type": "string",
          "default": "_test.$1",
          "description": "Pattern to replace file extension with when creating test file. (Use $1 for tested file's extension)"
        },
        "qassistant.openTestFileOnCreation": {
          "type": "boolean",
          "default": false,
          "description": "Whether QAssistant should open test file in editor on creation."
        },
        "qassistant.testFileLocation": {
          "type": "string",
          "enum": [
            "parallel",
            "adjacent"
          ],
          "default": "parallel",
          "description": "Where test files should live. Parallel will create a mirrored folder for test files, while adjacent will place tests next to the file its testing."
        },
        "qassistant.testFileHeader": {
          "type": "string",
          "default": "# frozen_string_literal: true",
          "description": "Header to include at the top of every test file (eg. helper imports, linter rules, etc)."
        },
        "qassistant.testFileSuiteOpening": {
          "type": "string",
          "default": "class $?",
          "description": "Suite definition at start of test file (use $? for Pascal case test file name)."
        },
        "qassistant.testFileSuiteClosing": {
          "type": "string",
          "default": "end",
          "description": "Define closing of suite (eg. closing bracket, end, etc)."
        },
        "qassistant.newFunctionMatcher": {
          "type": "string",
          "default": "def $?",
          "description": "Matcher for new function definitions (use $? to capture the new function's name)."
        },
        "qassistant.newFunctionTemplate": {
          "type": "string",
          "default": "\ttest('::$? <TEST DESCRIPTION>') do\n\t\t# auto generated test stub\n\tend",
          "description": "Template for new functions (use $? for function's name)."
        },
        "qassistant.testHeaderMatcher": {
          "type": "string",
          "default": "test\\(['\"]::$? .*?\\) do",
          "description": "Matcher to locate function tests in test file (use $? for function's name)."
        },
        "qassistant.autoDeleteFromTest": {
          "type": "boolean",
          "default": true,
          "description": "Whether QAssistant should automatically delete removed functions from test files."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "npm run compile && node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "typescript": "^3.3.1",
    "vscode": "^1.1.28",
    "tslint": "^5.12.1",
    "@types/node": "^10.12.21",
    "@types/mocha": "^2.2.42"
  },
  "dependencies": {
    "@types/mkdirp": "^0.5.2",
    "mkdirp": "^0.5.1"
  }
}
